1.
#include <iostream>
using namespace std;

int main()
{
    int balance = 1000, withdraw;
    cout << "Enter the amount to be withdrawn: " << endl;
    cin >> withdraw;
    // Write a while loop with a condition that repeats the process until the account has sufficient balance and the user input is positive.
    while (balance > 0 && withdraw > 0)
    {
        balance = balance - withdraw;
        cout << "Enter the amount to be withdrawn: " << endl;
        cin >> withdraw;
    }

    return 0;
}

b.
#include <iostream>
using namespace std;

void multiplicationTable(int number)
{
    // Write a loop that iterates 10 times
    for (int i = 0; i < 10; i++)
    {
        cout << number << " * " << i << " = " << number*i << endl;
    }
}

int main()
{
    int number;
    cout << "Enter a number: " << endl;
    cin >> number;
    multiplicationTable(number);
    return 0;
}

c.
#include <iostream>
using namespace std;

int main() 
{
    int number, sum = 0;
    
    do
    {
        cout << "Enter a number: ";
        cin >> number;
        sum += number;
    }
    while (number != 0);

    cout << "Total sum = " << sum << endl;
    return 0;
}


d.
#include <iostream>
using namespace std;

int main()
{
    int choice;

    do {
        cout << "Menu Options:" << endl;
        cout << "1. Print Good Choice" << endl;
        cout << "2. Print Great Choice" << endl;
        cout << "3. Quit" << endl;
        cout << "Enter your choice (1-3): ";
        cin >> choice;

        if (choice == 1)
        {
            cout << "Good Choice!" << endl;
        }
        else if (choice == 2)
        {
            cout << "Great Choice!" << endl;
        }
        // Add a condition to check if the choice is not among 1,2 and 3.    
        if (!((choice == 1) || (choice == 2) || (choice == 3)))
            cout << "Invalid choice. Please try again." << endl;
        }
        // Add a condition for the while loop which executes as long as the input is not 3.
        while (choice != 3);

    cout << "Program exiting." << endl;

    return 0;
}

e.
#include <iostream>
using namespace std;

int main() {
    int num = 20;
    do
    {
        num -= 5;
    } 
    while (num > 8);
    
    cout << num << endl;
    return 0;
}

5

f.
#include <iostream>
#include <cassert>
using namespace std;

int workdays(int total_days)
{
    int workday_count = 0;

    for (int day = 1; day <= total_days; day++)
    {
            // Check if the day falls on a workday (Monday to Friday)
            if (day % 7 != 0 && day % 7 != 6)
            {
                workday_count++;
            }
    }
    return workday_count;
}

iterates total_days - 1

the condition is true whenever it is anything but saturday (% 7 != 6) and sunday (% 7 == 0)

int main() {
    int total_days = 30;
    int workday_count = workdays(total_days);

    cout << "The number of workdays out of " << total_days << " is: " << workday_count << endl;
    
    // Use assert statements to test the function for other inputs
    assert(workdays(40) == 30);
    // Add your assert statement here
    assert(workdays(10) == 8)
    return 0;
}

1a.
Create a function expenseTracker() that takes in no parameters and returns an integer value for the total expense.
Call the function from main().
In the expenseTracker() function:
Create 3 integer variables in the expenseTracker() function - Groceries, Entertainment, Education - to store the category-wise totals.
Allow the user to enter expenses by providing category and amount.
Repeat this until the user decides to stop - which is done by inputting exit in the category prompt.
If the user inputs a category that doesn't exist, reprompt the user to input the right one.
Display the category-wise totals and print this out.
Return the total expenses incurred for the day.
Print the total expenses incurred for the day in the main function.

expensiveTracker()
    int groc, enter, edu

    do
    cin >> category
    cin >> amount
    if input == Invalid
        ask to input valid
    if input == cat (groc, enter, edu)
        cat += amount
    while (input != exit)

    print (groc, enter, edu) separately

    return total_expense

main()
    expensiveTracker()

